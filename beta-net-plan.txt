(0 e 0 (avh {v englishman, a nationality, h ?n1} nil) find-solution)
(1 i 1 (avh {v red, a color, h ?c1} (= ?c1 ?n1)))
(2 i 2 (avh {v spaniard, a nationality, h ?n2} (not= ?n2 ?n1)))
(3 i 3 (avh {v dog, a pet, h ?p1} (= ?p1 ?n2)))
(4 i 4 (avh {v ivory, a color, h ?c2} (not= ?c2 ?c1)))
(5 i 5 (avh {v green, a color, h ?c3} ((not= ?c3 ?c1) (= ?c3 (+ ?c2 1)))))
(6 i 6 (avh {v coffee, a drink, h ?d1} (= ?d1 ?c3)))
(7 i 7 (avh {v milk, a drink, h ?d2} ((not= ?d2 ?d1) (= ?d2 3))))
(8 i 8 (avh {v old-golds, a smokes, h ?s1} nil))
(9 i 9 (avh {v snails, a pet, h ?p2} ((not= ?p2 ?p1) (= ?p2 ?s1))))
(10 i 10 (avh {v ukrainian, a nationality, h ?n3} ((not= ?n3 ?n2) (not= ?n3 ?n1))))
(11 i 11 (avh {v tea, a drink, h ?d3} ((not= ?d3 ?d2) (not= ?d3 ?d1) (= ?d3 ?n3))))
(12 i 12 (avh {v norwegian, a nationality, h ?n4} ((not= ?n4 ?n3) (not= ?n4 ?n2) (not= ?n4 ?n1) (= ?n4 1))))
(13 i 13 (avh {v chesterfields, a smokes, h ?s2} (not= ?s2 ?s1)))
(14 i 14 (avh {v fox, a pet, h ?p3} ((not= ?p3 ?p2) (not= ?p3 ?p1) [(= ?s2 (- ?p3 1)) (= ?s2 (+ ?p3 1))])))
(15 i 15 (avh {v lucky-strikes, a smokes, h ?s3} ((not= ?s3 ?s2) (not= ?s3 ?s1))))
(16 i 16 (avh {v orange-juice, a drink, h ?d4} ((not= ?d4 ?d3) (not= ?d4 ?d2) (not= ?d4 ?d1) (= ?d4 ?s3))))
(17 i 17 (avh {v japanese, a nationality, h ?n5} ((not= ?n5 ?n4) (not= ?n5 ?n3) (not= ?n5 ?n2) (not= ?n5 ?n1))))
(18 i 18 (avh {v parliaments, a smokes, h ?s4} ((not= ?s4 ?s3) (not= ?s4 ?s2) (not= ?s4 ?s1) (= ?s4 ?n5))))
(19 i 19 (avh {v horse, a pet, h ?p4} ((not= ?p4 ?p3) (not= ?p4 ?p2) (not= ?p4 ?p1))))
(20 i 20 (avh {v kools, a smokes, h ?s5} ((not= ?s5 ?s4) (not= ?s5 ?s3) (not= ?s5 ?s2) (not= ?s5 ?s1) [(= ?p4 (- ?s5 1)) (= ?p4 (+ ?s5 1))])))
(21 i 21 (avh {v yellow, a color, h ?c4} ((not= ?c4 ?c3) (not= ?c4 ?c2) (not= ?c4 ?c1) (= ?c4 ?s5))))
(22 i 22 (avh {v blue, a color, h ?c5} ((not= ?c5 ?c4) (not= ?c5 ?c3) (not= ?c5 ?c2) (not= ?c5 ?c1) [(= ?c5 (- ?n4 1)) (= ?c5 (+ ?n4 1))])))
(23 i 23 (avh {v water, a drink, h ?d5} ((not= ?d5 ?d4) (not= ?d5 ?d3) (not= ?d5 ?d2) (not= ?d5 ?d1))))
(24 x 24 (avh {v zebra, a pet, h ?p5} ((not= ?p5 ?p4) (not= ?p5 ?p3) (not= ?p5 ?p2) (not= ?p5 ?p1))) find-solution 0 ((asser solution nationality englishman house ?n1) (asser solution color red house ?c1) (asser solution nationality spaniard house ?n2) (asser solution pet dog house ?p1) (asser solution color ivory house ?c2) (asser solution color green house ?c3) (asser solution drink coffee house ?d1) (asser solution drink milk house ?d2) (asser solution smokes old-golds house ?s1) (asser solution pet snails house ?p2) (asser solution nationality ukrainian house ?n3) (asser solution drink tea house ?d3) (asser solution nationality norwegian house ?n4) (asser solution smokes chesterfields house ?s2) (asser solution pet fox house ?p3) (asser solution smokes lucky-strikes house ?s3) (asser solution drink orange-juice house ?d4) (asser solution nationality japanese house ?n5) (asser solution smokes parliaments house ?s4) (asser solution pet horse house ?p4) (asser solution smokes kools house ?s5) (asser solution color yellow house ?c4) (asser solution color blue house ?c5) (asser solution drink water house ?d5) (asser solution pet zebra house ?p5)))
(25 e 27 (solution {house ?h, nationality ?n} nil) who-owns-zebra)
(26 x 26 (solution {house ?h, pet zebra} nil) who-owns-zebra 0 ((println (str ?n " owns the zebra"))))
(27 e 27 (solution {house ?h, nationality ?n} nil) who-dtinks-water)
(28 x 28 (solution {house ?h, drink water} nil) who-dtinks-water 0 ((println (str ?n " drinks water"))))
(29 ex 33 (value {pet ?e} nil) generate-pet-combinations 0 ((retract :FIDS 0) (asser avh a pet v ?e h 1) (asser avh a pet v ?e h 2) (asser avh a pet v ?e h 3) (asser avh a pet v ?e h 4) (asser avh a pet v ?e h 5)))
(30 ex 33 (value {nationality ?e} nil) generate-nationality-combinations 0 ((retract :FIDS 0) (asser avh a nationality v ?e h 1) (asser avh a nationality v ?e h 2) (asser avh a nationality v ?e h 3) (asser avh a nationality v ?e h 4) (asser avh a nationality v ?e h 5)))
(31 ex 33 (value {color ?e} nil) generate-color-combinations 0 ((retract :FIDS 0) (asser avh a color v ?e h 1) (asser avh a color v ?e h 2) (asser avh a color v ?e h 3) (asser avh a color v ?e h 4) (asser avh a color v ?e h 5)))
(32 ex 33 (value {drink ?e} nil) generate-drink-combinations 0 ((retract :FIDS 0) (asser avh a drink v ?e h 1) (asser avh a drink v ?e h 2) (asser avh a drink v ?e h 3) (asser avh a drink v ?e h 4) (asser avh a drink v ?e h 5)))
(33 ex 33 (value {smokes ?e} nil) generate-smokes-combinations 0 ((retract :FIDS 0) (asser avh a smokes v ?e h 1) (asser avh a smokes v ?e h 2) (asser avh a smokes v ?e h 3) (asser avh a smokes v ?e h 4) (asser avh a smokes v ?e h 5)))
