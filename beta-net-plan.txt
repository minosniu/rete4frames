(0 e 0 ((Goal unlock :?chest :?) nil nil) "Hold-chest-to-put-on-floor")
(1 i 1 ((Thing :? :?chest :?surf light) (:?surf) #object[clojure.core$eval3203$fn__3204 0x2c012a34 "clojure.core$eval3203$fn__3204@2c012a34"]))
(2 i 2 ((Monkey :?thing :? :?) (:?chest :?thing) #object[clojure.core$eval3207$fn__3208 0x19b4305c "clojure.core$eval3207$fn__3208@19b4305c"]))
(3 x 3 (not (Goal hold :?chest :?) nil nil) "Hold-chest-to-put-on-floor" 0 (:?chest) #object[clojure.core$eval3211$fn__3212 0x489cf822 "clojure.core$eval3211$fn__3212@489cf822"])
(4 e 0 ((Goal unlock :?chest :?) nil nil) "Put-chest-on-floor")
(5 i 2 ((Monkey :?chest :?place :?on) nil nil))
(6 x 4 ((Thing :? :?chest :? :?) nil nil) "Put-chest-on-floor" 0 (:?chest :?place :?on :?fids) #object[clojure.core$eval3215$fn__3216 0x693d1ad2 "clojure.core$eval3215$fn__3216@693d1ad2"])
(7 e 0 ((Goal unlock :?obj :?) nil nil) "Get-key-to-unlock")
(8 i 5 ((Thing :? :?obj floor :?) nil nil))
(9 i 6 ((Chest :? :?obj :?key) nil nil))
(10 i 2 ((Monkey :?thing :? :?) (:?thing :?key) #object[clojure.core$eval3219$fn__3220 0x1c0b0831 "clojure.core$eval3219$fn__3220@1c0b0831"]))
(11 x 3 (not (Goal hold :?key :?) nil nil) "Get-key-to-unlock" 0 (:?key) #object[clojure.core$eval3223$fn__3224 0x342fb2a3 "clojure.core$eval3223$fn__3224@342fb2a3"])
(12 e 0 ((Goal unlock :?chest :?) nil nil) "Move-to-chest-with-key")
(13 i 2 ((Monkey :?key :?mplace :?) nil nil))
(14 i 5 ((Thing :?cplace :?chest floor :?) (:?cplace :?mplace) #object[clojure.core$eval3227$fn__3228 0x542b1a18 "clojure.core$eval3227$fn__3228@542b1a18"]))
(15 i 6 ((Chest :? :?chest :?key) nil nil))
(16 x 7 (not (Goal walk-to :?cplace :?) nil nil) "Move-to-chest-with-key" 0 (:?cplace) #object[clojure.core$eval3231$fn__3232 0x81dc90e "clojure.core$eval3231$fn__3232@81dc90e"])
(17 e 0 ((Goal unlock :?name :?) nil nil) "Unlock-chest-with-key")
(18 i 6 ((Chest :?contents :?name :?key) nil nil))
(19 i 4 ((Thing :?place :?name :?on :?) nil nil))
(20 x 2 ((Monkey :?key :?place :?on) nil nil) "Unlock-chest-with-key" 0 (:?place :?fids :?contents :?name :?key) #object[clojure.core$eval3235$fn__3236 0x24f4a35f "clojure.core$eval3235$fn__3236@24f4a35f"])
(21 e 3 ((Goal hold :?obj :?) nil nil) "Unlock-chest-to-hold-object")
(22 i 6 ((Chest :?obj :?chest :?) nil nil))
(23 x 0 (not (Goal unlock :?chest :?) nil nil) "Unlock-chest-to-hold-object" 0 (:?chest) #object[clojure.core$eval3239$fn__3240 0x167d7b4b "clojure.core$eval3239$fn__3240@167d7b4b"])
(24 e 3 ((Goal hold :?obj :?) nil nil) "Use-ladder-to-hold")
(25 i 8 ((Thing :?place :?obj ceiling light) nil nil))
(26 i 9 (not (Thing :?place ladder :? :?) nil nil))
(27 x 10 (not (Goal move ladder :?place) nil nil) "Use-ladder-to-hold" 0 (:?place) #object[clojure.core$eval3243$fn__3244 0x5678b678 "clojure.core$eval3243$fn__3244@5678b678"])
(28 e 3 ((Goal hold :?obj :?) nil nil) "Climb-ladder-to-hold")
(29 i 8 ((Thing :?place :?obj ceiling light) nil nil))
(30 i 11 ((Thing :?place ladder floor :?) nil nil))
(31 i 2 ((Monkey :? :? :?s) (:?s) #object[clojure.core$eval3247$fn__3248 0x39a32269 "clojure.core$eval3247$fn__3248@39a32269"]))
(32 x 12 (not (Goal on ladder :?) nil nil) "Climb-ladder-to-hold" 0 () #object[clojure.core$eval3251$fn__3252 0x5361bed3 "clojure.core$eval3251$fn__3252@5361bed3"])
(33 e 3 ((Goal hold :?name :?) nil nil) "Grab-object-from-ladder")
(34 i 8 ((Thing :?place :?name ceiling light) nil nil))
(35 i 9 ((Thing :?place ladder :? :?) nil nil))
(36 x 13 ((Monkey blank :?place ladder) nil nil) "Grab-object-from-ladder" 0 (:?fids :?name) #object[clojure.core$eval3255$fn__3256 0x78a56d33 "clojure.core$eval3255$fn__3256@78a56d33"])
(37 e 3 ((Goal hold :?obj :?) nil nil) "Climb-to-hold")
(38 i 1 ((Thing :?place :?obj :?on light) (:?on) #object[clojure.core$eval3259$fn__3260 0x5ba7be9a "clojure.core$eval3259$fn__3260@5ba7be9a"]))
(39 i 2 ((Monkey :? :?place :?surf) (:?on :?surf) #object[clojure.core$eval3263$fn__3264 0x2c0e8f06 "clojure.core$eval3263$fn__3264@2c0e8f06"]))
(40 x 14 (not (Goal on :?on :?) nil nil) "Climb-to-hold" 0 (:?on) #object[clojure.core$eval3267$fn__3268 0x330635c2 "clojure.core$eval3267$fn__3268@330635c2"])
(41 e 3 ((Goal hold :?obj :?) nil nil) "Walk-to-hold")
(42 i 1 ((Thing :?place :?obj :?surf light) (:?surf) #object[clojure.core$eval3271$fn__3272 0x1979ca9e "clojure.core$eval3271$fn__3272@1979ca9e"]))
(43 i 2 ((Monkey :? :?loc :?) (:?place :?loc) #object[clojure.core$eval3275$fn__3276 0x758132b7 "clojure.core$eval3275$fn__3276@758132b7"]))
(44 x 7 (not (Goal walk-to :?place :?) nil nil) "Walk-to-hold" 0 (:?place) #object[clojure.core$eval3279$fn__3280 0x48593291 "clojure.core$eval3279$fn__3280@48593291"])
(45 e 3 ((Goal hold :?obj :?) nil nil) "Drop-to-hold")
(46 i 1 ((Thing :?place :?obj :?on light) nil nil))
(47 i 2 ((Monkey :?hold :?place :?on) (:?hold) #object[clojure.core$eval3283$fn__3284 0x7ed9bd3a "clojure.core$eval3283$fn__3284@7ed9bd3a"]))
(48 x 15 (not (Goal hold blank :?) nil nil) "Drop-to-hold" 0 () #object[clojure.core$eval3287$fn__3288 0x2fe0805 "clojure.core$eval3287$fn__3288@2fe0805"])
(49 e 3 ((Goal hold :?name :?) nil nil) "Grab-object")
(50 i 1 ((Thing :?place :?name :?on light) nil nil))
(51 x 16 ((Monkey blank :?place :?on) nil nil) "Grab-object" 0 (:?fids :?name) #object[clojure.core$eval3291$fn__3292 0x5df7389d "clojure.core$eval3291$fn__3292@5df7389d"])
(52 e 15 ((Goal hold blank :?) nil nil) "Drop-object")
(53 i 2 ((Monkey :?name :?place :?on) (:?name) #object[clojure.core$eval3295$fn__3296 0x319f3878 "clojure.core$eval3295$fn__3296@319f3878"]))
(54 x 4 ((Thing :? :?name :? :?) nil nil) "Drop-object" 0 (:?place :?on :?fids :?name) #object[clojure.core$eval3299$fn__3300 0x479e3c31 "clojure.core$eval3299$fn__3300@479e3c31"])
(55 e 17 ((Goal move :?obj :?place) nil nil) "Unlock-chest-to-move-object")
(56 i 6 ((Chest :?obj :?chest :?) nil nil))
(57 x 0 (not (Goal unlock :?chest :?) nil nil) "Unlock-chest-to-move-object" 0 (:?chest) #object[clojure.core$eval3303$fn__3304 0xd02b674 "clojure.core$eval3303$fn__3304@d02b674"])
(58 e 17 ((Goal move :?obj :?place) nil nil) "Hold-object-to-move")
(59 i 1 ((Thing :?loc :?obj :? light) (:?place :?loc) #object[clojure.core$eval3307$fn__3308 0x4fbe9d5e "clojure.core$eval3307$fn__3308@4fbe9d5e"]))
(60 i 2 ((Monkey :?hold :? :?) (:?obj :?hold) #object[clojure.core$eval3311$fn__3312 0x59db7593 "clojure.core$eval3311$fn__3312@59db7593"]))
(61 x 3 (not (Goal hold :?obj :?) nil nil) "Hold-object-to-move" 0 (:?obj) #object[clojure.core$eval3315$fn__3316 0x582d80b5 "clojure.core$eval3315$fn__3316@582d80b5"])
(62 e 17 ((Goal move :?obj :?place) nil nil) "Move-object-to-place")
(63 i 2 ((Monkey :?obj :?loc :?) (:?place :?loc) #object[clojure.core$eval3319$fn__3320 0x4e1308b7 "clojure.core$eval3319$fn__3320@4e1308b7"]))
(64 x 7 (not (Goal walk-to :?place :?) nil nil) "Move-object-to-place" 0 (:?place) #object[clojure.core$eval3323$fn__3324 0x4ed0ee4 "clojure.core$eval3323$fn__3324@4ed0ee4"])
(65 e 17 ((Goal move :?name :?place) nil nil) "Drop-object-once-moved")
(66 i 2 ((Monkey :?obj :?place :?) nil nil))
(67 x 1 ((Thing :? :?name :? light) nil nil) "Drop-object-once-moved" 0 (:?place :?fids :?name) #object[clojure.core$eval3327$fn__3328 0x736a8080 "clojure.core$eval3327$fn__3328@736a8080"])
(68 e 17 ((Goal move :?obj :?place) nil nil) "Already-moved-object")
(69 x 4 ((Thing :?place :?obj :? :?) nil nil) "Already-moved-object" 0 (:?fids) #object[clojure.core$eval3331$fn__3332 0x5a9e2ee8 "clojure.core$eval3331$fn__3332@5a9e2ee8"])
(70 e 7 ((Goal walk-to :?place :?) nil nil) "Already-at-place")
(71 x 2 ((Monkey :? :?place :?) nil nil) "Already-at-place" 0 (:?fids) #object[clojure.core$eval3335$fn__3336 0x2137a1ea "clojure.core$eval3335$fn__3336@2137a1ea"])
(72 e 7 ((Goal walk-to :?place :?) nil nil) "Get-on-floor-to-walk")
(73 i 2 ((Monkey :? :?loc :?surf) (:?place :?loc :?surf) #object[clojure.core$eval3339$fn__3340 0x772ffec7 "clojure.core$eval3339$fn__3340@772ffec7"]))
(74 x 18 (not (Goal on floor :?) nil nil) "Get-on-floor-to-walk" 0 () #object[clojure.core$eval3344$fn__3345 0x7e7530a "clojure.core$eval3344$fn__3345@7e7530a"])
(75 e 7 ((Goal walk-to :?place :?) nil nil) "Walk-holding-nothing")
(76 x 19 ((Monkey blank :?loc floor) (:?place :?loc) #object[clojure.core$eval3348$fn__3349 0x169ff38a "clojure.core$eval3348$fn__3349@169ff38a"]) "Walk-holding-nothing" 0 (:?place :?fids) #object[clojure.core$eval3352$fn__3353 0x2e40b3fc "clojure.core$eval3352$fn__3353@2e40b3fc"])
(77 e 7 ((Goal walk-to :?place :?) nil nil) "Walk-holding-object")
(78 x 20 ((Monkey :?obj :?loc floor) (:?place :?obj :?loc) #object[clojure.core$eval3356$fn__3357 0x344fdcff "clojure.core$eval3356$fn__3357@344fdcff"]) "Walk-holding-object" 0 (:?place :?obj :?fids) #object[clojure.core$eval3361$fn__3362 0x1fe42a47 "clojure.core$eval3361$fn__3362@1fe42a47"])
(79 e 18 ((Goal on floor :?) nil nil) "Jump-onto-floor")
(80 x 2 ((Monkey :? :? :?on) (:?on) #object[clojure.core$eval3365$fn__3366 0x5a5c9381 "clojure.core$eval3365$fn__3366@5a5c9381"]) "Jump-onto-floor" 0 (:?on :?fids) #object[clojure.core$eval3369$fn__3370 0x2b9ed299 "clojure.core$eval3369$fn__3370@2b9ed299"])
(81 e 14 ((Goal on :?obj :?) nil nil) "Walk-to-place-to-climb")
(82 i 4 ((Thing :?place :?obj :? :?) nil nil))
(83 i 2 ((Monkey :? :?loc :?) (:?place :?loc) #object[clojure.core$eval3373$fn__3374 0xe07442a "clojure.core$eval3373$fn__3374@e07442a"]))
(84 x 7 (not (Goal walk-to :?place :?) nil nil) "Walk-to-place-to-climb" 0 (:?place) #object[clojure.core$eval3377$fn__3378 0x23d15f06 "clojure.core$eval3377$fn__3378@23d15f06"])
(85 e 14 ((Goal on :?obj :?) nil nil) "Drop-to-climb")
(86 i 4 ((Thing :?place :?obj :? :?) nil nil))
(87 i 2 ((Monkey :?hold :?place :?) (:?hold) #object[clojure.core$eval3381$fn__3382 0x4c67b2f5 "clojure.core$eval3381$fn__3382@4c67b2f5"]))
(88 x 15 (not (Goal hold blank :?) nil nil) "Drop-to-climb" 0 () #object[clojure.core$eval3385$fn__3386 0x6494df0d "clojure.core$eval3385$fn__3386@6494df0d"])
(89 e 14 ((Goal on :?obj :?) nil nil) "Climb-indirectly")
(90 i 4 ((Thing :?place :?obj :?on :?) nil nil))
(91 i 16 ((Monkey blank :?place :?on2) (:?on2 :?on :?obj) #object[clojure.core$eval3389$fn__3390 0x572b65d5 "clojure.core$eval3389$fn__3390@572b65d5"]))
(92 x 14 (not (Goal on :?on :?) nil nil) "Climb-indirectly" 0 (:?on) #object[clojure.core$eval3394$fn__3395 0x5d0d8409 "clojure.core$eval3394$fn__3395@5d0d8409"])
(93 e 14 ((Goal on :?obj :?) nil nil) "Climb-directly")
(94 i 4 ((Thing :?place :?obj :?on :?) nil nil))
(95 x 16 ((Monkey blank :?place :?on) nil nil) "Climb-directly" 0 (:?obj :?fids) #object[clojure.core$eval3398$fn__3399 0x30321805 "clojure.core$eval3398$fn__3399@30321805"])
(96 e 14 ((Goal on :?obj :?) nil nil) "Already-on-object")
(97 x 2 ((Monkey :? :? :?obj) nil nil) "Already-on-object" 0 (:?fids) #object[clojure.core$eval3402$fn__3403 0x8e38bfa "clojure.core$eval3402$fn__3403@8e38bfa"])
(98 e 21 ((Goal eat :?obj :?) nil nil) "Hold-to-eat")
(99 i 2 ((Monkey :?h :? :?) (:?h :?obj) #object[clojure.core$eval3406$fn__3407 0x6b05254f "clojure.core$eval3406$fn__3407@6b05254f"]))
(100 x 3 (not (Goal hold :?obj :?) nil nil) "Hold-to-eat" 0 (:?obj) #object[clojure.core$eval3410$fn__3411 0xad8ffdc "clojure.core$eval3410$fn__3411@ad8ffdc"])
(101 e 21 ((Goal eat :?name :?) nil nil) "Satisfy-hunger")
(102 i 2 ((Monkey :?name :? :?) nil nil))
(103 x 4 ((Thing :? :?name :? :?) nil nil) "Satisfy-hunger" 0 (:?fids :?name) #object[clojure.core$eval3414$fn__3415 0x58744fc4 "clojure.core$eval3414$fn__3415@58744fc4"])
