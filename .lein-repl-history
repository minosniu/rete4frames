(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/waltz.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(facts)
(-main "run:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "trace:synch" "examples/waltz.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(facts)
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(clojure.stacktrace/e)
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:synch" "examples/mab.clj")
(-main "run:synch" "examples/zebra.clj")
(facts)
(-main "run:synch" "examples/zebra.clj")
(facts)
(-main "run:synch" "examples/zebra.clj")
(vari? '?n)
(-main "run:synch" "examples/zebra.clj")
(-main "run:synch" "examples/mab.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f25.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f37.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f50.clj")
(facts)
(-main "run:synch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/zebra.clj")
(-main "run:asynch" "examples/waltz.clj")
(facts)
(-main "run:asynch" "examples/zebra.clj")
(facts)
(-main "run:synch" "examples/zebra.clj")
(-main "run:synch" "examples/mab.clj")
(-main "run:synch" "examples/manners.clj")
(-main "run:synch" "examples/waltz.clj")
(exit)
(-main "run:synch" "examples/waltz.clj")
(facts)
(load-file "src/rete/core.clj")
(facts)
(load-file "src/rete/core.clj")
(facts)
(retract-fact 155)
(facts)
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "run:synch" "examples/manners.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f25.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f37.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "run:synch" "examples/waltz.clj")
(facts)
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "run:asynch" "examples/mab.clj")
(-main "trace:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/waltz.clj")
(facts)
(modify 174 '{label ZERO})
(modify-fact 174 '{label ZERO})
(facts)
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
=FMEM=
=FMMB=
=TEMPL=
=FMMB=
=TEMPL=
(.get =FMMB= 'monkey)
(facts)
(doseq [e (.get =FMMB= 'monkey)] (println e))
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(facts)
(doseq [e (.get =FMMB= 'monkey)] (println e))
=TEMPL=
(facts)
(doseq [e (.get =FMMB= 'thing)] (println e))
=TEMPL=
(doseq [e (.get =FMMB= 'chest)] (println e))
(doseq [e (.get =FMMB= 'monkey)] (println e))
=TEMPL=
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(facts)
(type (inc 0))
(get-glo :FCNT)
(type (get-glo :FCNT))
=FMMB=
(.get =FMMB= 'monkey)
(keys (.get =FMMB= 'monkey))
(first (keys (.get =FMMB= 'monkey)))
(type (first (keys (.get =FMMB= 'monkey))))
(type (first (keys (.get =FMMB= 'thing))))
(first (keys (.get =FMMB= 'thing)))
(nth (keys (.get =FMMB= 'thing)) 1)
(type (nth (keys (.get =FMMB= 'thing)) 1))
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
=TEMPL=
(.get =FMEM= 'monkey)
(.get =FMEM= 'thing)
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
=TEMPL=
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:asynch" "examples/waltz.clj")
(facts)
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(-main "run:asynch" "examples/zebra.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/mab.clj")
(facts)
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/mab.clj")
(facts)
=FMEM=
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/mab.clj")
(facts)
(typmapfids 'thing)
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/mab.clj")
(typmapfids 'thing)
(facts)
(doseq [e (typmapfids)] (println e))
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:asynch" "examples/waltz.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f37.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "asynch:run" "examples/mab.clj")
(-main "run:asynch" "examples/mab.clj")
(def mp {'?x 1 '?y 2 '?z 3})
mp
(map #(mp %) '(?x ?y ?z))
(map #(mp %) '(?y ?x ?z))
(load-file "src/rete/core.clj")
(var-vals mp '(?z ?y ?x ?y))
(def f1 (fn [?x ?y] (let [z (+ ?x ?y)] (- z 1))))
(apply f1 '(2 4))
(apply f1 '(7 8))
(second f1)
(load-file "src/rete/core.clj")
(def reso '((pn sal ((?x ?y) (fn [?x ?y] (let [z (+ ?x ?y)] (- z 1))))) {?x 123 ?y 256}))
(fire-resolved reso)
(def psr (list 'pn 'sal f1))
psr
(def reso (list psr '{?x 123 ?y 256}))
reso
(fire-resolved reso)
(trace)
(fire-resolved reso)
(load-file "src/rete/core.clj")
(fire-resolved reso)
(def psr (list 'pn 'sal (list '(?x ?y) f1)))
(def reso (list psr '{?x 123 ?y 256}))
reso
(fire-resolved reso)
(load-file "src/rete/core.clj")
(fire-resolved reso)
(fn [?x ?y] (let [z (+ ?x ?y)] (- z 1)))
(eval (list 'fn '[?x ?y] '(let [z (+ ?x ?y)] (- z 1)))
)
(eval (list 'fn '[?x ?y] '(let [z (+ ?x ?y)] (- z 1))))
(load-file "src/rete/core.clj")
(def ex '(let [z (* ?x ?y)] (- z 3)))
(collect-vars ex)
(rest '(a))
(nil? (rest '(a)))
(empty? (rest '(a)))
(seq? (rest '(a)))
(seq (rest '(a)))
(load-file "src/rete/core.clj")
(collect-vars ex)
(empty? 1)
(load-file "src/rete/core.clj")
(collect-vars ex)
(load-file "src/rete/core.clj")
(collect-vars ex)
ex
(load-file "src/rete/core.clj")
(collect-vars ex)
(seq? '[a])
(empty? [])
(load-file "src/rete/core.clj")
(collect-vars ex)
(seq? '?x)
(vector? '?x)
(collect-vars '?x nil)
(load-file "src/rete/core.clj")
(collect-vars ex)
(load-file "src/rete/core.clj")
(collect-vars ex)
(let [vrs (collect-vars ex)] (mk-rhs-func vrs ex))
(vec (collect-vars ex))
(load-file "src/rete/core.clj")
(let [vrs (collect-vars ex)] (mk-rhs-func vrs ex))
(def f1 (let [vrs (collect-vars ex)] (mk-rhs-func vrs ex)))
(apply f1 '(5 15))
(load-file "src/rete/core.clj")
(def f1 (let [vrs (collect-vars ex)] (mk-rhs-func vrs ex)))
(apply f1 '(50 15))
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(qq '(goal-is-to action hold argument1 ?chest))
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(quote goal)
(facts)
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(aget =ABLINK= 39)
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(aget =ABLINK= 39)
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/waltz.clj")
(facts)
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners_f16.clj")
(-main "run:asynch" "examples/waltz.clj")
(-main "run:asynch" "examples/waltz_f12.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:asynch" "examples/walt.clj" "examples/waltz_f12.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f37.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
(-main "run:asynch" "examples/zebra.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:asynch" "examples/waltz.clj")
(-main "run:asynch" "examples/mab.clj")
(qq '(papa mama ?lapa te) nil)
(load-file "src/rete/core.clj")
(qq '(papa mama ?lapa te) nil)
(qq '(papa mama ?lapa te) '(mama te))
(load-file "src/rete/core.clj")
(trans-aser '(asser goal-is-to action walk-to argument1 ?cplace) nil)
(trans-aser '(asser goal-is-to action walk-to argument1 ?cplace) '(walk-to))
(load-file "src/rete/core.clj")
(trans-asser '(asser goal-is-to action walk-to argument1 ?cplace) '(walk-to))
(trans-retract '(retract ?goal ?monk)'{?goal 3 ?monk 15})
(trans-modify '(modify ?thing location ?place on-top-of floor) nil '{?thing 12})
(trans-modify '(modify ?thing location ?place on-top-of floor) '(floor) '{?thing 12})
(partition 2 '[a 1 b 2 c 3])
(map first (partition 2 '[a 1 b 2 c 3]))
(load-file "src/rete/core.clj")
(trans-rhs '(let [next (inc ?n)]
  (modify ?gor status (a/arriveN ?obj ?rou next ?spd ?rad ?pro ?run)
N next)) nil '{?gor 0})
(-main "run:asynch" "examples/waltz.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/waltz.clj")
(-main "run:asynch" "examples/zebra.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/waltz.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "trace:asynch" "examples/manners.clj")
(list? '(a b c))
(seq? '(a b c))
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj")
(enl '(a b c))
(enl '((a) (b) (c)))
(seq? '[a b c])
(load-file "src/rete/core.clj")
(mk-test-func '(> ?x 1))
(mk-test-func '((> ?x 1)))
(trace)
(mk-test-func '((> ?x 1)))
(load-file "src/rete/core.clj")
(mk-test-func '(> ?x 1))
(trace)
(mk-test-func '(> ?x 1))
(mk-test-func '((> ?x 1)(<= ?y (count ?x))))
(mk-test-func '([(not= ?z "papa")(= ?w "mama")](> ?x 1)(<= ?y (count ?x))))
(mk-test-func '[(> ?x 1)(<= ?y (count ?x))])
(load-file "src/rete/core.clj")
(trace)
(mk-test-func '[(> ?x 1)(<= ?y (count ?x))])
(mk-test-func '([(not= ?z "papa")(= ?w "mama")](> ?x 1)(<= ?y (count ?x))))
(load-file "src/rete/core.clj")
(trace)
(mk-test-func '([(not= ?z "papa")(= ?w "mama")](> ?x 1)(<= ?y (count ?x))))
(mk-test-func '[(> ?x 1)(<= ?y (count ?x))])
(mk-test-func '((> ?x 1)(<= ?y (count ?x))))
(mk-test-func '(> ?x 1))
(trace)
(mk-test-func '(> ?x 1))
(mk-test-func '((> ?x 1)(<= ?y (count ?x))))
(mk-test-func '([(not= ?z "papa")(= ?w "mama")](> ?x 1)(<= ?y (count ?x))))
(mk-test-func '(not-exists GoRoute status ?sts run ?run protagonist ?pro))
(mk-test-func '[(not= ?sts "STSRT")(not-exists GoRoute status ?sts run ?run protagonist ?pro)])
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/waltz.clj")
(-main "run:asynch" "examples/zebra.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f37.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "run:asynch" "examples/zebra.clj")
(facts)
(-main "run:asynch" "examples/zebra.clj")
(-main "run:synch" "examples/zebra.clj")
(facts)
(-main "trace:synch" "examples/zebra.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "trace:synch" "examples/zebra.clj")
(facts)
(-main "run:synch" "examples/zebra.clj")
(-main "trace:synch" "examples/zebra.clj")
(facts)
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
