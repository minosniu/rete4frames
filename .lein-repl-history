(load-file "src/rete/core.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(app "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/mab.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(app "run:asynch" "examples/auto.clj")
(facts)
(app "trace:asynch" "examples/auto.clj")
(load-file "src/rete/core.clj")
(match-not-existed '[repair {advice qq}] '[repair {advice nil}])
(match-not-existed '[repair {advice qq}] '[repair {advice zz}])
(match-not-existed '[repair {advice qq}] '[repair {advice qq}])
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/auto.clj")
(app "trace:asynch" "examples/mab.clj")
(app "run:asynch" "examples/mab.clj")
(app "run:asynch" "examples/manners.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(app "run:asynch" "examples/auto.clj")
(facts)
(app "run:asynch" "examples/auto.clj")
(app "trace:asynch" "examples/auto.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/auto.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/auto.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/auto.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/auto.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/auto.clj")
(set '(a b c d))
(= (set '(a b c d)) (set ['c 'a 'd 'b]))
(= (set '(a b c d)) (set ['c 'a 'd]))
(= (set '(a b c d)) (set ['c 'a 'd 'b]))
(= (set '(a b c)) (set ['c 'a 'd 'b]))
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/auto.clj")
(app "run:asynch" "examples/mab.clj")
(app "run:asynch" "examples/manners.clj")
(app "run:asynch" "examples/waltz.clj")
(app "run:asynch" "examples/zebra.clj")
(app "run:synch" "examples/zebra.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(app "run:asynch" "examples/waltz.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/auto.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/auto.clj")
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f37.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
(app "trace:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
(app "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/mab.clj")
(app "step:asynch" "examples/mab.clj")
(fire 1)
(fire 4)
@CFSET
(fire 1)
(facts)
(app "step:asynch" "examples/mab.clj")
(fire 6)
(fire 1)
(fire 10)
(app "trace:asynch" "examples/mab.clj")
(app "step:asynch" "examples/mab.clj")
(fire 6)
(fire 1)
(facts)
(load-file "src/rete/core.clj")
(app "step:asynch" "examples/mab.clj")
(fire 6)
(fire 1)
(app "step:asynch" "examples/mab.clj")
(fire 6)
(fire 1)
(aget BMEM 97)
(aget BMEM 96)
(app "step:asynch" "examples/mab.clj")
(fire 6)
(fire 1)
(aget BMEM 97)
(aget BMEM 96)
(fire 1)
(aget BMEM 97)
(aget BMEM 96)
(load-file "src/rete/core.clj")
(app "step:asynch" "examples/mab.clj")
(fire 6)
(fire 1)
@FIDS
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/mab.clj")
(app "run:asynch" "examples/manners.clj")
(app "trace:asynch" "examples/manners.clj")
(app "step:asynch" "examples/manners.clj")
(fire 1)
(facts)
(doall (map printl @CFSET))
(doall (map println @CFSET))
(fire 1)
(doall (map println @CFSET))
(fire 1)
(doall (map println @CFSET))
(count @CFSET)
(app "run:asynch" "examples/manners.clj")
(facts)
(app "run:asynch" "examples/manners.clj")
(app "run:asynch" "examples/mab.clj")
(app "run:asynch" "examples/waltz.clj")
(app "run:asynch" "examples/zebra.clj")
(app "run:synch" "examples/zebra.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run:asynch" "examples/mab.clj")
(app "run:asynch" "examples/manners.clj")
(app "run:synch" "examples/zebra.clj")
(app "run:asynch" "examples/waltz.clj")
(app "run:asynch" "examples/auto.clj")
(app "run:asynch" "examples/manners.clj")
(strategy-breadth)
(strategy-depth)
(app "run:asynch" "examples/manners.clj")
(app "run:asynch" "examples/auto.clj")
(app "run:asynch" "examples/waltz.clj")
(app "run:synch" "examples/zebra.clj")
(app "run:asynch" "examples/mab.clj")
(strategy-breadth)
(app "run:asynch" "examples/manners.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/waltz.clj")
(app "run" "examples/mab.clj")
(app "run" "examples/zebra.clj")
(app "run" "examples/auto.clj")
(app "run" "examples/sudoku/sudoku.clj" "examples/sudoku/grid3x3-p1.clj")
(app "run" "examples/hypertension.clj" "examples/hypertension-fact-base.clj")
(facts)
(app "run" "examples/hypertension.clj" "examples/hypertension-fact-base.clj")
(app "run" "examples/hypertension.clj")
(facts)
(app "run" "examples/hypertension.clj")
(fire)
(app "run" "examples/hypertension.clj")
(facts)
(app "run" "examples/hypertension.clj")
(app "trace" "examples/hypertension.clj")
(app "run" "examples/hypertension.clj")
(facts)
(app "run" "examples/hypertension.clj")
(app "run" "examples/sudoku/sudoku.clj" "examples/sudoku/grid3x3-p16.clj")
(app "run" "examples/hypertension.clj")
(app "run" "examples/mab.clj")
(collect-vars '(let [mess {:a ?x :b ?y}]))
(collect-vars '(let [x ?x y ?y mess {:a x :b y}]))
(seq? {})
(map? {})
(type {})
(load-file "src/rete/core.clj")
(collect-vars '(let [x ?x y ?y mess {:a x :b y}]))
(collect-vars '(let [mess {:a ?x :b ?y}]))
(load-file "src/rete/core.clj")
(collect-vars '(let [mess {:a ?x :b ?y}]))
(load-file "src/rete/core.clj")
(collect-vars '(let [mess {:a ?x :b ?y}]))
(load-file "src/rete/core.clj")
(collect-vars '(let [mess {:a ?x :b ?y}]))
(app "run" "examples/mab.clj")
(load-file "src/rete/core.clj")
(collect-vars '(let [mess {:a ?x :b ?y}]))
(app "run" "examples/mab.clj")
(load-file "src/rete/core.clj")
(app "run" "examples/mab.clj")
(app "run" "examples/manners.clj")
(app "run" "examples/waltz.clj")
(app "run" "examples/zebra.clj")
(app "run" "examples/auto.clj")
(app "run" "examples/sudoku.clj")
(app "run" "examples/sudoku/sudoku.clj")
(app "run" "examples/sudoku/grid3x3-p6.clj")
(app "run" "examples/sudoku/grid3x3-p1.clj")
(app "run" "examples/sudoku/sudoku.clj" "examples/sudoku/grid3x3-p1.clj")
(app "run" "examples/sudoku/sudoku.clj" "examples/sudoku/grid3x3-p6.clj")
(app "run" "examples/sudoku/sudoku.clj" "examples/sudoku/grid3x3-p8.clj")
(app "run" "examples/sudoku/sudoku.clj" "examples/sudoku/grid3x3-p15.clj")
(app "run" "examples/sudoku/sudoku.clj" "examples/sudoku/grid3x3-p16.clj")
(app "run" "examples/sudoku/sudoku.clj" "examples/sudoku/grid3x3-p17.clj")
(app "run" "examples/sudoku/sudoku.clj" "examples/sudoku/grid3x3-p16.clj")
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/manners.clj" "examples/manners_f16.clj")
(app "run" "examples/manners.clj" "examples/manners_f32.clj")
(app "run" "examples/manners.clj" "examples/manners_f64.clj")
(app "run" "examples/manners.clj" "examples/manners_f128.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f25.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f37.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f50.clj")
(app "trace" "examples/mab.clj")
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/manners.clj" "examples/manners_f16.clj")
(app "run" "examples/manners.clj" "examples/manners_f32.clj")
(app "run" "examples/manners.clj" "examples/manners_f64.clj")
(app "run" "examples/manners.clj" "examples/manners_f128.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f25.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f37.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f50.clj")
(empty? {})
(empty? nil)
(app "run" "examples/manners.clj" "examples/manners_f128.clj")
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/manners.clj" "examples/manners_f16.clj")
(app "run" "examples/manners.clj" "examples/manners_f32.clj")
(app "run" "examples/manners.clj" "examples/manners_f64.clj")
(app "run" "examples/manners.clj" "examples/manners_f128.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f25.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f37.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f50.clj")
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/manners.clj" "examples/manners_f16.clj")
(app "run" "examples/manners.clj" "examples/manners_f32.clj")
(app "run" "examples/manners.clj" "examples/manners_f64.clj")
(app "run" "examples/manners.clj" "examples/manners_f128.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f25.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f37.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f50.clj")
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/manners.clj" "examples/manners_f16.clj")
(app "run" "examples/manners.clj" "examples/manners_f32.clj")
(app "run" "examples/manners.clj" "examples/manners_f64.clj")
(app "run" "examples/manners.clj" "examples/manners_f128.clj")
(app "run" "examples/mab.clj")
(app "run" "examples/manners.clj")
(app "run" "examples/zebra.clj")
(app "run" "examples/auto.clj")
(app "run" "examples/sudoku/sudoku.clj")
(app "run" "examples/hypertension.clj")
(app "run" "examples/waltz.clj")
(facts)
(defn my-mapt [f] (fn [rfn] (fn [acc input] (rfn acc (f input)))))
(def incer (my-mapt inc))
(reduce (incer conj) [] [0 1 2])
(reduce (my-mapt inc conj) [] [0 1 2])
(reduce ((my-mapt inc) conj) [] [0 1 2])
(reduce (incer str) "" [0 1 2])
(defn my-cat [rtf] (fn [acc input] (reduce rtf acc input)))
(reduce (my-cat conj) [] [[0 1 2][3 4 5]])
(reduce (my-cat cons) [] [[0 1 2][3 4 5]])
(conj [0 1][2 3])
(cons [0 1][2 3])
(cons [][0 1])
(conj [][0 1])
(reduce (my-cat cons) '() [[0 1 2][3 4 5]])
(reduce conj [] [0 1])
(reduce conj [] [0 1 2])
(reduce cons [] [0 1 2])
(reduce #(cons %2 %1 [] [0 1 2])
)
(reduce #(cons %2 %1) [] [0 1 2])
(reduce (my-cat #(cons %2 %1)) '() [[0 1 2][3 4 5]])
(reduce (my-cat #(cons %2 %1)) [] [[0 1 2][3 4 5]])
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/manners.clj" "examples/manners_f16.clj")
(app "run" "examples/manners.clj" "examples/manners_f32.clj")
(app "run" "examples/manners.clj" "examples/manners_f64.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f25.clj")
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/manners.clj" "examples/manners_f16.clj")
(app "run" "examples/manners.clj" "examples/manners_f32.clj")
(app "run" "examples/manners.clj" "examples/manners_f64.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f25.clj")
(app "trace" "examples/mab.clj")
(app "run" "examples/mab.clj")
(app "run" "examples/manners.clj")
(app "run" "examples/waltz.clj")
(app "run" "examples/zebra.clj")
(app "run" "examples/auto.clj")
(app "trace" "examples/mab.clj")
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/manners.clj" "examples/manners_f16.clj")
(app "run" "examples/manners.clj" "examples/manners_f32.clj")
(app "run" "examples/manners.clj" "examples/manners_f64.clj")
(time (+ 2 3))
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/manners.clj" "examples/manners_f16.clj")
(app "run" "examples/manners.clj" "examples/manners_f32.clj")
(app "run" "examples/manners.clj" "examples/manners_f64.clj")
(app "run" "examples/manners.clj" "examples/manners_f128.clj")
(app "run" "examples/mab.clj")
(app "run" "examples/zebra.clj")
(app "run" "examples/auto.clj")
(app "run" "examples/sudoku/sudoku.clj" "examples/sudoku/grid3x3-p1.clj")
(app "run" "examples/hypertension.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f25.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f37.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f50.clj")
(load-facts "examples/waltz_f12.clj")
(def TEMPL
    (apply hash-map (mapcat #(list (first %) (templ-map (rest %))) '((stage value))))
  (line p1 p2)
  (edge p1 p2 joined label plotted)
  (junct p1 p2 p3 base-point type))
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
TEMPL
(reset)
(facts)
(load-facts "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(reset)
(only-load-facts "examples/waltz_f12.clj")
(count (fact-list))
(@IDFACT 345)
(tree-match '(line 520010 :?) @FMEM {})
(tree-match '(line :? 60008) @FMEM {})
(tree-match '(line :?x :?y) @FMEM {:?y 60008})
(mapcat #(if (> % 4) [%]) [1 2 3 4 5 1 2 6]) 
(seq nil)
(matched-context1 [a b c d] [a :?x c :?y] {})
(matched-context1 '[a b c d] '[a :?x c :?y] {})
(load-file "src/rete/core.clj")
(matched-context1 '[a b c d] '[a :?x c :?y] {})
(load-file "src/rete/core.clj")
(matched-context1 '[a b c d] '[a :?x c :?y] {})
(load-file "src/rete/core.clj")
(matched-context1 '[a b c d] '[a :?x c :?y] {})
(matched-context1 '[a b c d] '[a :?x c :?y] '{:?y d})
(matched-context1 '[a b c d] '[a :?x c :?y] '{:?y m})
(load-file "src/rete/core.clj")
(app "run" "examples/mab.clj")
(load-file "src/rete/core.clj")
(app "run" "examples/mab.clj")
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/manners.clj" "examples/manners_f16.clj")
(app "run" "examples/manners.clj" "examples/manners_f32.clj")
(app "run" "examples/manners.clj" "examples/manners_f64.clj")
(app "run" "examples/manners.clj" "examples/manners_f128.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f25.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f37.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f50.clj")
(load-file "src/rete/core.clj")
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/manners.clj" "examples/manners_f16.clj")
(app "run" "examples/manners.clj" "examples/manners_f32.clj")
(app "run" "examples/manners.clj" "examples/manners_f64.clj")
(app "run" "examples/manners.clj" "examples/manners_f128.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f25.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f37.clj")
(load-file "src/rete/core.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f25.clj")
(load-file "src/rete/core.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f25.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f37.clj")
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/manners.clj" "examples/manners_f16.clj")
(app "run" "examples/manners.clj" "examples/manners_f32.clj")
(app "run" "examples/manners.clj" "examples/manners_f64.clj")
(app "run" "examples/manners.clj" "examples/manners_f128.clj")
(load-file "src/rete/core.clj")
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/manners.clj" "examples/manners_f16.clj")
(app "run" "examples/manners.clj" "examples/manners_f32.clj")
(app "run" "examples/manners.clj" "examples/manners_f64.clj")
(app "run" "examples/manners.clj" "examples/manners_f128.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f25.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f37.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f50.clj")
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/manners.clj" "examples/manners_f16.clj")
(app "run" "examples/manners.clj" "examples/manners_f32.clj")
(app "run" "examples/manners.clj" "examples/manners_f64.clj")
(app "run" "examples/manners.clj" "examples/manners_f128.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f25.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f37.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f50.clj")
(app "run" "examples/mab.clj")
(app "run" "examples/zebra.clj")
(app "run" "examples/auto.clj")
(app "run" "examples/sudoku/sudoku.clj" "examples/sudoku/grid3x3-p1.clj")
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/manners.clj" "examples/manners_f16.clj")
(app "run" "examples/manners.clj" "examples/manners_f32.clj")
(app "run" "examples/manners.clj" "examples/manners_f64.clj")
(app "run" "examples/manners.clj" "examples/manners_f128.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f25.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f37.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f50.clj")
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
MINSAL
(app "trace" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/mab.clj")
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
MINSAL
(app "run" "examples/zebra.clj")
(exit)
(app "run" "examples/manners.clj" "examples/manners_f8.clj")
(app "run" "examples/zebra.clj")
(app "run" "examples/mab.clj")
(app "run" "examples/auto.clj")
(app "run" "examples/sudoku/sudoku.clj" "examples/sudoku/grid3x3-p1.clj")
(app "run" "examples/hypertension.clj")
(run-load-facts "")
(app "run" "examples/hypertension.clj")
(app "run" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run" "examples/manners.clj" "examples/manners_f128.clj")
(exit)
(-main)
(app "trace" "examples/mab.clj")
(in-ns 'rete.core)
(app "trace" "examples/mab.clj")
(-main)
(facts)
(in-ns 'rete.core)
(facts)
(fire)
(facts)
(fire)
(-main)
(load-file "src/rete/core.clj")
(-main)
(facts)
(rete.core/facts)
(clojure.string/split "abc")
(clojure.string/split "abc" \s)
(clojure.string/split "abc" " ")
(clojure.string/split "abc" #"\s")
(clojure.string/split "abc def" #"\s")
(-main)
(rete.core/facts)
(exit)
(-main)
(in-ns 'rete.core)
(app "trace" "examples/mab.clj")
(exit)
(-main)
(in-ns 'rete.core)
(app "run" "examples/mab.clj")
(-main)
(in-ns 'rete.core)
(facts)
(exit)
(-main)
(-mai(rete.core/facts)
)
(rete.core/facts)
(-main)
(rete.core/facts)
(read-string "")
(read-string "nil")
(-main)
(rete.core/facts)
(-main)
(rete.core/facts)
(-main)
(rete.core/facts)
(-main)
(rete.core/facts)
(exit)
