(-main "trace:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(-main "trace:asynch" "examples/test.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(-main "run:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/test.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:asynch" "examples/test.clj")
(facts)
(-main "run:asynch" "examples/test.clj")
(facts)
(-main "run:asynch" "examples/test.clj")
(facts)
(-main "run:asynch" "examples/test.clj")
(facts)
(some rest '((a) (b c) (d)))
(some second '((a nil) (b c) (d nil)))
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/test.clj")
(-main "trace:asynch" "examples/test.clj")
(-main "run:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(facts)
(-main "run:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "trace:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "trace:asynch" "examples/test.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "trace:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/test.clj")
(-main "trace:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/test.clj")
(-main "run:asynch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/test.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:synch" "examples/manners2.clj" "examples/manners_f64.clj")
(-main "trace:synch" "examples/manners2.clj" "examples/manners_f64.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners2.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners2.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners2.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners2.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners2.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners2.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners2.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners2.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners2.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners2.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners2.clj" "examples/manners_f16.clj")
(-main "run:asynch" "examples/manners2.clj" "examples/manners_f32.clj")
(-main "run:asynch" "examples/manners2.clj" "examples/manners_f64.clj")
(-main "run:asynch" "examples/manners2.clj" "examples/manners_f128.clj")
(-main "run:synch" "examples/manners2.clj" "examples/manners_f128.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/manners2.clj" "examples/manners_f128.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/manners2.clj" "examples/manners_f128.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/manners2.clj" "examples/manners_f128.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/manners2.clj" "examples/manners_f128.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/manners2.clj" "examples/manners_f128.clj")
(-main "trace:synch" "examples/manners2.clj" "examples/manners_8.clj")
(-main "trace:synch" "examples/manners2.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(-main "trace:synch" "examples/manners2.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(-main "trace:synch" "examples/manners2.clj" "examples/manners_f8.clj")
(-main "run:synch" "examples/manners2.clj" "examples/manners_f8.clj")
(-main "run:synch" "examples/manners2.clj" "examples/manners_f128.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/manners2.clj" "examples/manners_f8.clj")
(-main "run:synch" "examples/manners2.clj" "examples/manners_f128.clj")
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "trace:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj")
(-main "run:synch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/test.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/test.clj")
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(facts)
(-main "run:synch" "examples/waltz.clj")
(-main "trace:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj")
(-main "trace:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj")
(-main "trace:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(facts)
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(facts)
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(facts)
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(facts)
(fact-exists? '(edge {p1 1550009}))
(fact-exists? '(edge {p1 60003 p2 50003 joined true label NIL plotted T}))
(fact-exists? '(edge {p1 60003 p2 50003 joined tru}))
(fact-exists? '(edge {p1 60003 p2 50003 joined TRUE}))
(fact-exists? '(edge {p1 60003 p2 50003 joined TRUE label NIL plotted T}))
(fact-exists? '(edge {p1 60003 p2 50003 joined TRUE}))
(fact-exists? '(edge {p1 60003 p2 50003 joined TRUE label NIL}))
(fact-exists? '(edge {p1 60003 p2 50003 joined TRUE label NIL plotted NIL}))
(fact-exists? '(edge {p1 980006 p2 990006 joined TRUE label B plotted T}))
(fact-exists? '(edge {p1 980006 p2 990006 joined TRUE label B plotted NIL}))
(fact-exists? '(edge {p1 350005 p2 340004 joined TRUE label PLUS plotted NIL}))
(fact-exists? '(edge {p1 350005 p2 340004 joined TRUE label PLUS plotted TRUE}))
(fact-exists? '(edge {p1 350005 p2 340004 joined TRUE label PLUS}))
(fact-exists? '(edge {p1 0 p2 2 joined TRUE label B}))
(fact-exists? '(edge {p1 0 p2 20000 joined TRUE label B}))
(fact-exists? '(edge {p1 1550011 p2 1530011 joined TRUE label B}))
(fact-exists? '(edge {p1 20000 p2 0 joined TRUE label B}))
(fact-exists? '(edge {p1 2 p2 0 joined TRUE label B}))
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(get-x 0)
(wz/get-x 0)
(wz/get-y 0)
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "trace:synch" "examples/waltz.clj")
(load-file "src/rete/core.clj")
(-main "trace:synch" "examples/waltz.clj")
(seq nil)
(seq '(nil))
(load-file "src/rete/core.clj")
(-main "trace:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/waltz.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(facts)
(-main "run:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "trace:synch" "examples/waltz.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(facts)
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(clojure.stacktrace/e)
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:synch" "examples/mab.clj")
(-main "run:synch" "examples/zebra.clj")
(facts)
(-main "run:synch" "examples/zebra.clj")
(facts)
(-main "run:synch" "examples/zebra.clj")
(vari? '?n)
(-main "run:synch" "examples/zebra.clj")
(-main "run:synch" "examples/mab.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f25.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f37.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f50.clj")
(facts)
(-main "run:synch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/zebra.clj")
(-main "run:asynch" "examples/waltz.clj")
(facts)
(-main "run:asynch" "examples/zebra.clj")
(facts)
(-main "run:synch" "examples/zebra.clj")
(-main "run:synch" "examples/mab.clj")
(-main "run:synch" "examples/manners.clj")
(-main "run:synch" "examples/waltz.clj")
(exit)
(-main "run:synch" "examples/waltz.clj")
(facts)
(load-file "src/rete/core.clj")
(facts)
(load-file "src/rete/core.clj")
(facts)
(retract-fact 155)
(facts)
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "run:synch" "examples/manners.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:synch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:synch" "examples/waltz.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f25.clj")
(-main "run:synch" "examples/waltz.clj" "examples/waltz_f37.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "run:synch" "examples/waltz.clj")
(facts)
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/waltz.clj")
(facts)
(-main "run:asynch" "examples/mab.clj")
(-main "trace:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/waltz.clj")
(facts)
(modify 174 '{label ZERO})
(modify-fact 174 '{label ZERO})
(facts)
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
=FMEM=
=FMMB=
=TEMPL=
=FMMB=
=TEMPL=
(.get =FMMB= 'monkey)
(facts)
(doseq [e (.get =FMMB= 'monkey)] (println e))
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(facts)
(doseq [e (.get =FMMB= 'monkey)] (println e))
=TEMPL=
(facts)
(doseq [e (.get =FMMB= 'thing)] (println e))
=TEMPL=
(doseq [e (.get =FMMB= 'chest)] (println e))
(doseq [e (.get =FMMB= 'monkey)] (println e))
=TEMPL=
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(facts)
(type (inc 0))
(get-glo :FCNT)
(type (get-glo :FCNT))
=FMMB=
(.get =FMMB= 'monkey)
(keys (.get =FMMB= 'monkey))
(first (keys (.get =FMMB= 'monkey)))
(type (first (keys (.get =FMMB= 'monkey))))
(type (first (keys (.get =FMMB= 'thing))))
(first (keys (.get =FMMB= 'thing)))
(nth (keys (.get =FMMB= 'thing)) 1)
(type (nth (keys (.get =FMMB= 'thing)) 1))
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
=TEMPL=
(.get =FMEM= 'monkey)
(.get =FMEM= 'thing)
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
=TEMPL=
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:asynch" "examples/waltz.clj")
(facts)
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(-main "run:asynch" "examples/zebra.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/mab.clj")
(facts)
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/mab.clj")
(facts)
=FMEM=
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/mab.clj")
(facts)
(typmapfids 'thing)
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/mab.clj")
(typmapfids 'thing)
(facts)
(doseq [e (typmapfids)] (println e))
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:asynch" "examples/waltz.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f37.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
