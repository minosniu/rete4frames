(app "run:asynch" "examples/mab.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(exit)
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(exit)
(app "run:asynch" "examples/mab.clj")
(exit)
(app "run:asynch" "examples/manners.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f37.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
(def fm (atom nil))
(def fm (atom {}))
(reset! fm (assoc-in fm [:t1 :a :b :c :d] 1))
(reset! fm (assoc-in @fm [:t1 :a :b :c :d] 1))
(get-in @fm [:t1 :a :b :c :d])
(get-in @fm [:t1 :a :b :e :d])
(reset! fm (assoc-in @fm [:t1 :a :b :e :d] 2))
(get-in @fm [:t1 :a :b :e :d])
(load-file "src/rete/core.clj")
(dissoc-in @fm [:t1 :a :b :e :d])
(dissoc-in @fm [:t1 :a :b :c :d])
(load-file "src/rete/core.clj")
(dissoc-in @fm [:t1 :a :b :c :d])
(load-file "src/rete/core.clj")
(dissoc-in @fm [:t1 :a :b :c :d])
(load-file "src/rete/core.clj")
(dissoc-in @fm [:t1 :a :b :c :d])
@fm
(load-file "src/rete/core.clj")
(dissoc-in @fm [:t1 :a :b :c :d])
(dissoc-in @fm [:t1 :a :b :e :d])
@fm
(load-file "src/rete/core.clj")
(dissoc-in @fm [:t1 :a :b :e :d])
(dissoc-in @fm [:t1 :a :b :c :d])
(dissoc-in @fm [:t1 :j :b :e :d])
(dissoc-in @fm [:t1 :a :b :e :d])
(dissoc-in @fm [:t1 :a :b :c :d])
(load-file "src/rete/core.clj")
(dissoc-in @fm [:t1 :a :b :c :d])
(dissoc-in @fm [:t1 :a :b :e :d])
=TEMPL=
(sorted-map :c1 :b 2 :q3 :d 4)
(sorted-map :c1 1 :b 2 :q 3 :d 4)
(def sm (sorted-map :c1 1 :b 2 :q 3 :d 4))
(def sm (sorted-map 'c1 1 'b 2 'q 3 'd 4))
sm
(merge sm {'q 18 'd 22 'b 111}) 
=ANET=
@ANET
(app "run:asynch" "examples/mab.clj")
@ANET
(app "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(seq {'a 1 'b 2})
(apply sorted-map (seq {'a 1 'b 2}))
(apply sorted-map (flatten (seq {'a 1 'b 2})))
(sorted-map 'a 1 'b 2
)
(def TEMPL {'t1 (sorted-map 'c '? 'a '? 'b '?) 't2 (sorted-map 'd '? 'e '? 'c '?)})
TEMPL
(def AM (atom {}))
(mapmem-put 't1 {'b 4 'a 2} 44 AM)
@AM
(def AM (atom {}))
(load-file "src/rete/core.clj")
(mapmem-put 't1 {'b 4 'a 2} 44 AM)
@AM
(mapmem-get 't1 {'b 4 'a 2} AM)
(mapmem-get 't2 {'c 14 'e 42 'd 0} AM)
(mapmem-get 't1 {'a 2 'b 4 'c -1} AM)
(mapmem-rem 't1 {'a 2 'b 4 'c -1} AM)
(mapmem-rem 't2 {'c 14 'e 42 'd 0} AM)
(mapmem-rem 't1 {'b 4 'a 2} AM)
(app "trace:asynch" "examples/mab.clj")
=FMMB=
=FMEM=
(def fc (atom 0))
(swap! fc inc)
@AM
(mapmem-put 't1 {'b 4 'a 2} 44 AM)
@AM
(mapmem-put 't2 {'c 14 'e 42 'd 0} 33 AM)
(mapmem-put 't1 {'a 2 'b 4 'c -1} 77 AM)
(apply sorted-map '(d 2 b 4 a 1))
(seq (apply sorted-map '(d 2 b 4 a 1)))
(app "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/mab.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f37.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
(load-file "src/rete/core.clj")
@ANET
(load-file "src/rete/core.clj")
@IDFACT
(app "run:asynch" "examples/mab.clj")
@IDFACT
(load-file "src/rete/core.clj")
(farme-by-id 62)
(frame-by-id 62)
(load-file "src/rete/core.clj")
(frame-by-id 62)
(load-file "src/rete/core.clj")
(frame-by-id 62)
(fact-list)
(facts)
(ppr :all)
(ppr 'chest)
(load-file "src/rete/core.clj")
(typmapfids)
(typmapfids 'chest)
(load-file "src/rete/core.clj")
(frames-of-type 'chest)
@ANET
(app "trace:asynch" "examples/mab.clj")
@ANET
(load-file "src/rete/core.clj")
ANET
(app "trace:asynch" "examples/mab.clj")
@ANET
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/mab.clj")
@ANET
@ACNT
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/mab.clj")
@ANET
(app "run:asynch" "examples/mab.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run:asynch" "examples/waltz.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run:asynch" "examples/waltz.clj")
(facts)
(app "run:asynch" "examples/waltz.clp" "examples/waltz_f12.clp")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f37.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
FCNT
(count @FMEM)
(count @IDFACT)
(count (fact-list))
(facts)
(fact-exists? '(edge {p1 4 p2 3})
)
(frame-by-id 32564)
(fact-exists? '(edge {p1 4800004 p2 4840004})
)
(frame-by-id 27471)
(fact-exists? '(edge {p1 4800004 p2 4840003}))
(fact-exists? '(edge {p1 4800004 p2 4800003}))
(frame-by-id 25026)
(app "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
