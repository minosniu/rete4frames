reso
(fire-resolved reso)
(load-file "src/rete/core.clj")
(fire-resolved reso)
(fn [?x ?y] (let [z (+ ?x ?y)] (- z 1)))
(eval (list 'fn '[?x ?y] '(let [z (+ ?x ?y)] (- z 1)))
)
(eval (list 'fn '[?x ?y] '(let [z (+ ?x ?y)] (- z 1))))
(load-file "src/rete/core.clj")
(def ex '(let [z (* ?x ?y)] (- z 3)))
(collect-vars ex)
(rest '(a))
(nil? (rest '(a)))
(empty? (rest '(a)))
(seq? (rest '(a)))
(seq (rest '(a)))
(load-file "src/rete/core.clj")
(collect-vars ex)
(empty? 1)
(load-file "src/rete/core.clj")
(collect-vars ex)
(load-file "src/rete/core.clj")
(collect-vars ex)
ex
(load-file "src/rete/core.clj")
(collect-vars ex)
(seq? '[a])
(empty? [])
(load-file "src/rete/core.clj")
(collect-vars ex)
(seq? '?x)
(vector? '?x)
(collect-vars '?x nil)
(load-file "src/rete/core.clj")
(collect-vars ex)
(load-file "src/rete/core.clj")
(collect-vars ex)
(let [vrs (collect-vars ex)] (mk-rhs-func vrs ex))
(vec (collect-vars ex))
(load-file "src/rete/core.clj")
(let [vrs (collect-vars ex)] (mk-rhs-func vrs ex))
(def f1 (let [vrs (collect-vars ex)] (mk-rhs-func vrs ex)))
(apply f1 '(5 15))
(load-file "src/rete/core.clj")
(def f1 (let [vrs (collect-vars ex)] (mk-rhs-func vrs ex)))
(apply f1 '(50 15))
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(qq '(goal-is-to action hold argument1 ?chest))
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(quote goal)
(facts)
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(aget =ABLINK= 39)
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(aget =ABLINK= 39)
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/waltz.clj")
(facts)
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners_f16.clj")
(-main "run:asynch" "examples/waltz.clj")
(-main "run:asynch" "examples/waltz_f12.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:asynch" "examples/walt.clj" "examples/waltz_f12.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f37.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
(-main "run:asynch" "examples/zebra.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:asynch" "examples/waltz.clj")
(-main "run:asynch" "examples/mab.clj")
(qq '(papa mama ?lapa te) nil)
(load-file "src/rete/core.clj")
(qq '(papa mama ?lapa te) nil)
(qq '(papa mama ?lapa te) '(mama te))
(load-file "src/rete/core.clj")
(trans-aser '(asser goal-is-to action walk-to argument1 ?cplace) nil)
(trans-aser '(asser goal-is-to action walk-to argument1 ?cplace) '(walk-to))
(load-file "src/rete/core.clj")
(trans-asser '(asser goal-is-to action walk-to argument1 ?cplace) '(walk-to))
(trans-retract '(retract ?goal ?monk)'{?goal 3 ?monk 15})
(trans-modify '(modify ?thing location ?place on-top-of floor) nil '{?thing 12})
(trans-modify '(modify ?thing location ?place on-top-of floor) '(floor) '{?thing 12})
(partition 2 '[a 1 b 2 c 3])
(map first (partition 2 '[a 1 b 2 c 3]))
(load-file "src/rete/core.clj")
(trans-rhs '(let [next (inc ?n)]
  (modify ?gor status (a/arriveN ?obj ?rou next ?spd ?rad ?pro ?run)
N next)) nil '{?gor 0})
(-main "run:asynch" "examples/waltz.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/waltz.clj")
(-main "run:asynch" "examples/zebra.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/waltz.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "trace:asynch" "examples/manners.clj")
(list? '(a b c))
(seq? '(a b c))
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj")
(enl '(a b c))
(enl '((a) (b) (c)))
(seq? '[a b c])
(load-file "src/rete/core.clj")
(mk-test-func '(> ?x 1))
(mk-test-func '((> ?x 1)))
(trace)
(mk-test-func '((> ?x 1)))
(load-file "src/rete/core.clj")
(mk-test-func '(> ?x 1))
(trace)
(mk-test-func '(> ?x 1))
(mk-test-func '((> ?x 1)(<= ?y (count ?x))))
(mk-test-func '([(not= ?z "papa")(= ?w "mama")](> ?x 1)(<= ?y (count ?x))))
(mk-test-func '[(> ?x 1)(<= ?y (count ?x))])
(load-file "src/rete/core.clj")
(trace)
(mk-test-func '[(> ?x 1)(<= ?y (count ?x))])
(mk-test-func '([(not= ?z "papa")(= ?w "mama")](> ?x 1)(<= ?y (count ?x))))
(load-file "src/rete/core.clj")
(trace)
(mk-test-func '([(not= ?z "papa")(= ?w "mama")](> ?x 1)(<= ?y (count ?x))))
(mk-test-func '[(> ?x 1)(<= ?y (count ?x))])
(mk-test-func '((> ?x 1)(<= ?y (count ?x))))
(mk-test-func '(> ?x 1))
(trace)
(mk-test-func '(> ?x 1))
(mk-test-func '((> ?x 1)(<= ?y (count ?x))))
(mk-test-func '([(not= ?z "papa")(= ?w "mama")](> ?x 1)(<= ?y (count ?x))))
(mk-test-func '(not-exists GoRoute status ?sts run ?run protagonist ?pro))
(mk-test-func '[(not= ?sts "STSRT")(not-exists GoRoute status ?sts run ?run protagonist ?pro)])
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/mab.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/waltz.clj")
(-main "run:asynch" "examples/zebra.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f37.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "run:asynch" "examples/zebra.clj")
(facts)
(-main "run:asynch" "examples/zebra.clj")
(-main "run:synch" "examples/zebra.clj")
(facts)
(-main "trace:synch" "examples/zebra.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "trace:synch" "examples/zebra.clj")
(facts)
(-main "run:synch" "examples/zebra.clj")
(-main "trace:synch" "examples/zebra.clj")
(facts)
(load-file "src/rete/core.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
(destruct '(a b c))
(destruct (vec '(a b c))))
(destruct (vec '(a b c)))
(destruct (vec '([d a] b c)))
(destruct (vec '([d a] b [c e])))
(destruct (vec '([d a] b [[c r t & h] e])))
(load-file "src/rete/core.clj")
(destruct (vec '([d a] b [[c r t & h] e])))
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
(-main "run:asynch" "examples/mab.clj")
(facts)
(pp 'thing)
(rete.core/pp 'thing)
(pp :all)
(-main "run:asynch" "examples/mab.clj")
(pp :all)
(load-file "src/rete/core.clj")
(pp :all)
(ppr :all)
(doc pp)
(pp)
(ppr :all)
(pp)
(ppr 'monkey)
(ppr 'thing)
(facts)
(ppr 'chest)
(ppr 'chest0)
(-main "run:asynch" "examples/waltz.clj")
(ppr :all)
(facts)
(ppr 'junct)
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/waltz.clj")
(-main "run:asynch" "examples/manners.clj")
(-main "run:asynch" "examples/zebra.clj")
(-main "run:synch" "examples/zebra.clj")
(-main "run:synch" "examples/mab.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(exit)
(put-glo :A 4)
(def GLOMEM (HashMap.))
(put-glo :A 4)
(get-glo :A)
(do (put-glo :A 0) (dotimes [i 1000] (put-glo :A (+ 1 (get-glo :A)))) (get-glo :A))
(time (do (put-glo :A 0) (dotimes [i 1000] (put-glo :A (+ 1 (get-glo :A)))) (get-glo :A)))
(time (do (def A (atom 0)) (dotimes [i 1000] (swap! A + 1)) @A))
(time (do (def A (atom 0)) (dotimes [i 1000000] (swap! A + 1)) @A))
(time (do (put-glo :A 0) (dotimes [i 1000000] (put-glo :A (+ 1 (get-glo :A)))) (get-glo :A)))
(time (do (put-glo :A 0) (dotimes [i 10000000] (put-glo :A (+ 1 (get-glo :A)))) (get-glo :A)))
(time (do (def A (atom 0)) (dotimes [i 10000000] (swap! A + 1)) @A))
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(load-file "src/core/rete.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(def A (atom [1 2 3 4 5]))
(swap! A filter #{3})
@A
(reset! A (filter #{3} @A))
@A
(def A (atom [1 2 3 4 5]))
(reset! A (filter #{3} @A))
@A
(filter #(not= % 3) [1 2 3 4 5])
(def A (atom [1 2 3 4 5]))
(swap! A filter #(not= % 3))
@A
(def A (atom [1 2 3 4 5]))
@A
(swap! A filter #(not= % 3))
@A
(def A (atom [1 2 3 4 5]))
@A
(reset! A (filter #(not= % 3) @A))
@A
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
@A
(reset! A concat [7 8])
(reset! A concat [7])
(reset! A concat [])
(reset! A concat 1)
@A
(swap! A concat [7 8])
(reset! A [22 22])
(reset! A (filter #(= % 22) [22 22 23]))
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "trace:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "trace:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(-main "trace:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(load-file "src/rete/core.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(def fl (fact-list))
fl
(first fl)
(.keySet =FMMB=)
(.get =FMMB= 'junkt)
(.get =FMMB= 'junct)
(-main "run:asynch" "examples/waltz.clj")
(fact-list)
(.keySet =FMMB=)
(.get =FMMB= 'junct)
(load-file "src/rete/core.clj")
(frames-of-type 'junct)
(load-file "src/rete/core.clj")
(frames-of-type 'junct)
(facts)
(load-file "src/rete/core.clj")
(frames-of-type 'junct)
(map println (frames-of-type 'junct))
(first (frames-of-type 'junct))
(frames-of-type 'limits)
(load-file "src/rete/core.clj")
(frames-of-type 'limits)
(frame-for-id 111)
(frame-for-fid 111)
(frame-by-id 111)
(def x1 (frames-of-type 'limits))
(type x1)
(.keySet x1)
(.get x1 111}
(.get x1 111)
(type (.get x1 111))
(first (.get x1 111))
(rest (.get x1 111))
(=TEMPL= 'limits)
(load-file "src/rete/core.clj")
(frames-of-type 'limits)
(frames-of-type 'junct)
(map println (frames-of-type 'junct))
(facts)
(doseq [e (frames-of-type 'junct)] (println e)]
(doseq [e (frames-of-type 'junct)] (println e))
(load-file "src/rete/core.clj")
(-factsOfType "junct")
(load-file "src/rete/core.clj")
(-factsOfType "junct")
(symbol 'junct)
(load-file "src/rete/core.clj")
(-factsOfType "junct")
(for [e (frames-of-type 'junct)] (first e))
(load-file "src/rete/core.clj")
(-factsOfType "junct")
(load-file "src/rete/core.clj")
(-factsOfType "junct")
(load-file "src/rete/core.clj")
(-factsOfType "junct")
(load-file "src/rete/core.clj")
(-factsOfType "junct")
(load-file "src/rete/core.clj")
(-factsOfType "junct")
(load-file "src/rete/core.clj")
(-allFacts)
(load-file "src/rete/core.clj")
(-allFacts)
(load-file "src/rete/core.clj")
(-allFacts)
(def hm (-allFacts))
(.keySet hm)
(.get hm "line")
(.get hm "stage")
(.get hm "junct")
(facts)
(.keySet hm)
(.get hm "line")
(load-file "src/rete/core.clj")
(def hm (-allFacts))
(.keySet hm)
hm
(load-file "src/rete/core.clj")
(def hm (-allFacts))
(.keySet hm)
(.get hm "line")
(load-file "src/rete/core.clj")
(def hm (-allFacts))
(.get hm "line")
(.keySet hm)
(load-file "src/rete/core.clj")
(def jn (-factsOfType "junct"))
(count jn)
(type jn)
(load-file "src/rete/core.clj")
(def jn (-factsOfType "junct"))
(count jn)
(type jn)
(load-file "src/rete/core.clj")
(def jn (-factsOfType "junct"))
(count jn)
(type jn)
(load-file "src/rete/core.clj")
(exit)
(-main "run:asynch" "examples/mab.clj")
(-main "trace:asynch" "examples/mab.clj")
(exit)
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f37.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
(exit)
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(-main "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f37.clj")
(-main "run:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
(exit)
