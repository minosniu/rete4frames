(app "run:asynch" "examples/mab.clj")
(app "run:asynch" "examples/manners.clj")
(app "trace:asynch" "examples/manners.clj")
(app "run:asynch" "examples/manners.clj")
(app "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(not-match-ctx? '(repair {advice drill}) '(repair {advice ?a}) {})
(not-match-ctx? '(repair {advice drill}) '(repair {advice ?a}) '{a drill})
(not-match-ctx? '(repair {advice drill}) '(repair {advice ?a}) '{?a drill})
(not-match-ctx? '(repair {advice drill}) '(repair {advice ?a}) '{?a drive})
(not-match-ctx? '(repair {advice drill} 15) '(repair {advice ?a}) '{?a drive})
TEMPL
(not-match-ctx? '(Last {seat 5} 15) '(Last {seat ?s}) '{?s 5})
(not-match-ctx? '(Last {seat 5} 15) '(Last {seat ?s}) '{?s 6})
(not-match-ctx? '(Last {seat 5}) '(Last {seat ?s}) '{?s 6})
(load-file "src/rete/core.clj")
(not-match-ctx? '(Last {seat 5}) '(Last {seat ?s}) '{?s 6})
(not-match-ctx '(Last {seat 5}) '(Last {seat ?s}) '{?s 6})
(not-match-ctx '(Last {seat 5}) '(Last {seat ?s}) '{?s 5})
(not-match-ctx '(Last {seat 4}) '(Last {seat ?s}) '{})
(load-file "src/rete/core.clj")
(match-context '(Last {seat 4}) '(Last {seat ?s}) '{})
(load-file "src/rete/core.clj")
(match-context '(Last {seat 4}) '(Last {seat ?s}) '{})
(concatenate nil nil)
(concat nil nil)
(concat () ())
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(aget AMEM 5)
(aget AMEM 6)
(facts)
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(aget AMEM 5)
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/manners.clj")
(facts)
(app "run:asynch" "examples/mab.clj")
(app "trace:asynch" "examples/manners.clj")
(app "run:asynch" "examples/manners.clj")
(app "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj")
(app "run:asynch" "examples/manners.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(facts)
(fact-exists? '(Path {seat 62 name 3}))
(fact-exists? '(Path {seat 62 name 31}))
(load-file "src/rete/core.clj")
(ground '{a ?x b ?y} '{?x 5 ?y 6})
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(app "trace:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(def x (list 'Path (hash-map 'name (+ 2 3) 'id (/8 2))))
(def x (list 'Path (hash-map 'name (+ 2 3) 'id (/ 8 2))))
x
(filter #(not= % x) '[(Path {name 7 id 6}) (Path {id 4 name 5})])
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/auto.clj")
(app "run:asynch" "examples/mab.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(app "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/mab.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(app "run:asynch" "examples/auto.clj")
(facts)
(app "trace:asynch" "examples/auto.clj")
(load-file "src/rete/core.clj")
(match-not-existed '[repair {advice qq}] '[repair {advice nil}])
(match-not-existed '[repair {advice qq}] '[repair {advice zz}])
(match-not-existed '[repair {advice qq}] '[repair {advice qq}])
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/auto.clj")
(app "trace:asynch" "examples/mab.clj")
(app "run:asynch" "examples/mab.clj")
(app "run:asynch" "examples/manners.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(app "run:asynch" "examples/auto.clj")
(facts)
(app "run:asynch" "examples/auto.clj")
(app "trace:asynch" "examples/auto.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/auto.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/auto.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/auto.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/auto.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/auto.clj")
(set '(a b c d))
(= (set '(a b c d)) (set ['c 'a 'd 'b]))
(= (set '(a b c d)) (set ['c 'a 'd]))
(= (set '(a b c d)) (set ['c 'a 'd 'b]))
(= (set '(a b c)) (set ['c 'a 'd 'b]))
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/auto.clj")
(app "run:asynch" "examples/mab.clj")
(app "run:asynch" "examples/manners.clj")
(app "run:asynch" "examples/waltz.clj")
(app "run:asynch" "examples/zebra.clj")
(app "run:synch" "examples/zebra.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f128.clj")
(app "run:asynch" "examples/waltz.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/auto.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/auto.clj")
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f25.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f37.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
(app "trace:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f50.clj")
(app "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(app "trace:asynch" "examples/mab.clj")
(app "step:asynch" "examples/mab.clj")
(fire 1)
(fire 4)
@CFSET
(fire 1)
(facts)
(app "step:asynch" "examples/mab.clj")
(fire 6)
(fire 1)
(fire 10)
(app "trace:asynch" "examples/mab.clj")
(app "step:asynch" "examples/mab.clj")
(fire 6)
(fire 1)
(facts)
(load-file "src/rete/core.clj")
(app "step:asynch" "examples/mab.clj")
(fire 6)
(fire 1)
(app "step:asynch" "examples/mab.clj")
(fire 6)
(fire 1)
(aget BMEM 97)
(aget BMEM 96)
(app "step:asynch" "examples/mab.clj")
(fire 6)
(fire 1)
(aget BMEM 97)
(aget BMEM 96)
(fire 1)
(aget BMEM 97)
(aget BMEM 96)
(load-file "src/rete/core.clj")
(app "step:asynch" "examples/mab.clj")
(fire 6)
(fire 1)
@FIDS
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/mab.clj")
(load-file "src/rete/core.clj")
(app "run:asynch" "examples/mab.clj")
(app "run:asynch" "examples/manners.clj")
(app "trace:asynch" "examples/manners.clj")
(app "step:asynch" "examples/manners.clj")
(fire 1)
(facts)
(doall (map printl @CFSET))
(doall (map println @CFSET))
(fire 1)
(doall (map println @CFSET))
(fire 1)
(doall (map println @CFSET))
(count @CFSET)
(app "run:asynch" "examples/manners.clj")
(facts)
(app "run:asynch" "examples/manners.clj")
(app "run:asynch" "examples/mab.clj")
(app "run:asynch" "examples/waltz.clj")
(app "run:asynch" "examples/zebra.clj")
(app "run:synch" "examples/zebra.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f8.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f16.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f32.clj")
(app "run:asynch" "examples/manners.clj" "examples/manners_f64.clj")
(app "run:asynch" "examples/waltz.clj" "examples/waltz_f12.clj")
